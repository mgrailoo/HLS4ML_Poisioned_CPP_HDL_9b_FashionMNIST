// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config9_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_0_V,
        data_1_V,
        data_2_V,
        data_3_V,
        data_4_V,
        data_5_V,
        data_6_V,
        data_7_V,
        data_8_V,
        data_9_V,
        res_0_V,
        res_0_V_ap_vld,
        res_1_V,
        res_1_V_ap_vld,
        res_2_V,
        res_2_V_ap_vld,
        res_3_V,
        res_3_V_ap_vld,
        res_4_V,
        res_4_V_ap_vld,
        res_5_V,
        res_5_V_ap_vld,
        res_6_V,
        res_6_V_ap_vld,
        res_7_V,
        res_7_V_ap_vld,
        res_8_V,
        res_8_V_ap_vld,
        res_9_V,
        res_9_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [8:0] data_0_V;
input  [8:0] data_1_V;
input  [8:0] data_2_V;
input  [8:0] data_3_V;
input  [8:0] data_4_V;
input  [8:0] data_5_V;
input  [8:0] data_6_V;
input  [8:0] data_7_V;
input  [8:0] data_8_V;
input  [8:0] data_9_V;
output  [15:0] res_0_V;
output   res_0_V_ap_vld;
output  [15:0] res_1_V;
output   res_1_V_ap_vld;
output  [15:0] res_2_V;
output   res_2_V_ap_vld;
output  [15:0] res_3_V;
output   res_3_V_ap_vld;
output  [15:0] res_4_V;
output   res_4_V_ap_vld;
output  [15:0] res_5_V;
output   res_5_V_ap_vld;
output  [15:0] res_6_V;
output   res_6_V_ap_vld;
output  [15:0] res_7_V;
output   res_7_V_ap_vld;
output  [15:0] res_8_V;
output   res_8_V_ap_vld;
output  [15:0] res_9_V;
output   res_9_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] res_0_V;
reg res_0_V_ap_vld;
reg[15:0] res_1_V;
reg res_1_V_ap_vld;
reg[15:0] res_2_V;
reg res_2_V_ap_vld;
reg[15:0] res_3_V;
reg res_3_V_ap_vld;
reg[15:0] res_4_V;
reg res_4_V_ap_vld;
reg[15:0] res_5_V;
reg res_5_V_ap_vld;
reg[15:0] res_6_V;
reg res_6_V_ap_vld;
reg[15:0] res_7_V;
reg res_7_V_ap_vld;
reg[15:0] res_8_V;
reg res_8_V_ap_vld;
reg[15:0] res_9_V;
reg res_9_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire   [15:0] shl_ln_fu_196_p3;
reg   [15:0] res_0_V_preg;
wire   [15:0] shl_ln728_1_fu_205_p3;
reg   [15:0] res_1_V_preg;
wire   [15:0] shl_ln728_2_fu_214_p3;
reg   [15:0] res_2_V_preg;
wire   [15:0] shl_ln728_3_fu_223_p3;
reg   [15:0] res_3_V_preg;
wire   [15:0] shl_ln728_4_fu_232_p3;
reg   [15:0] res_4_V_preg;
wire   [15:0] shl_ln728_5_fu_241_p3;
reg   [15:0] res_5_V_preg;
wire   [15:0] shl_ln728_6_fu_250_p3;
reg   [15:0] res_6_V_preg;
wire   [15:0] shl_ln728_7_fu_259_p3;
reg   [15:0] res_7_V_preg;
wire   [15:0] shl_ln728_8_fu_268_p3;
reg   [15:0] res_8_V_preg;
wire   [15:0] shl_ln728_9_fu_277_p3;
reg   [15:0] res_9_V_preg;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 res_0_V_preg = 16'd0;
#0 res_1_V_preg = 16'd0;
#0 res_2_V_preg = 16'd0;
#0 res_3_V_preg = 16'd0;
#0 res_4_V_preg = 16'd0;
#0 res_5_V_preg = 16'd0;
#0 res_6_V_preg = 16'd0;
#0 res_7_V_preg = 16'd0;
#0 res_8_V_preg = 16'd0;
#0 res_9_V_preg = 16'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                res_0_V_preg[7] <= 1'b0;
        res_0_V_preg[8] <= 1'b0;
        res_0_V_preg[9] <= 1'b0;
        res_0_V_preg[10] <= 1'b0;
        res_0_V_preg[11] <= 1'b0;
        res_0_V_preg[12] <= 1'b0;
        res_0_V_preg[13] <= 1'b0;
        res_0_V_preg[14] <= 1'b0;
        res_0_V_preg[15] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        res_0_V_preg[15 : 7] <= shl_ln_fu_196_p3[15 : 7];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                res_1_V_preg[7] <= 1'b0;
        res_1_V_preg[8] <= 1'b0;
        res_1_V_preg[9] <= 1'b0;
        res_1_V_preg[10] <= 1'b0;
        res_1_V_preg[11] <= 1'b0;
        res_1_V_preg[12] <= 1'b0;
        res_1_V_preg[13] <= 1'b0;
        res_1_V_preg[14] <= 1'b0;
        res_1_V_preg[15] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        res_1_V_preg[15 : 7] <= shl_ln728_1_fu_205_p3[15 : 7];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                res_2_V_preg[7] <= 1'b0;
        res_2_V_preg[8] <= 1'b0;
        res_2_V_preg[9] <= 1'b0;
        res_2_V_preg[10] <= 1'b0;
        res_2_V_preg[11] <= 1'b0;
        res_2_V_preg[12] <= 1'b0;
        res_2_V_preg[13] <= 1'b0;
        res_2_V_preg[14] <= 1'b0;
        res_2_V_preg[15] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        res_2_V_preg[15 : 7] <= shl_ln728_2_fu_214_p3[15 : 7];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                res_3_V_preg[7] <= 1'b0;
        res_3_V_preg[8] <= 1'b0;
        res_3_V_preg[9] <= 1'b0;
        res_3_V_preg[10] <= 1'b0;
        res_3_V_preg[11] <= 1'b0;
        res_3_V_preg[12] <= 1'b0;
        res_3_V_preg[13] <= 1'b0;
        res_3_V_preg[14] <= 1'b0;
        res_3_V_preg[15] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        res_3_V_preg[15 : 7] <= shl_ln728_3_fu_223_p3[15 : 7];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                res_4_V_preg[7] <= 1'b0;
        res_4_V_preg[8] <= 1'b0;
        res_4_V_preg[9] <= 1'b0;
        res_4_V_preg[10] <= 1'b0;
        res_4_V_preg[11] <= 1'b0;
        res_4_V_preg[12] <= 1'b0;
        res_4_V_preg[13] <= 1'b0;
        res_4_V_preg[14] <= 1'b0;
        res_4_V_preg[15] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        res_4_V_preg[15 : 7] <= shl_ln728_4_fu_232_p3[15 : 7];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                res_5_V_preg[7] <= 1'b0;
        res_5_V_preg[8] <= 1'b0;
        res_5_V_preg[9] <= 1'b0;
        res_5_V_preg[10] <= 1'b0;
        res_5_V_preg[11] <= 1'b0;
        res_5_V_preg[12] <= 1'b0;
        res_5_V_preg[13] <= 1'b0;
        res_5_V_preg[14] <= 1'b0;
        res_5_V_preg[15] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        res_5_V_preg[15 : 7] <= shl_ln728_5_fu_241_p3[15 : 7];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                res_6_V_preg[7] <= 1'b0;
        res_6_V_preg[8] <= 1'b0;
        res_6_V_preg[9] <= 1'b0;
        res_6_V_preg[10] <= 1'b0;
        res_6_V_preg[11] <= 1'b0;
        res_6_V_preg[12] <= 1'b0;
        res_6_V_preg[13] <= 1'b0;
        res_6_V_preg[14] <= 1'b0;
        res_6_V_preg[15] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        res_6_V_preg[15 : 7] <= shl_ln728_6_fu_250_p3[15 : 7];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                res_7_V_preg[7] <= 1'b0;
        res_7_V_preg[8] <= 1'b0;
        res_7_V_preg[9] <= 1'b0;
        res_7_V_preg[10] <= 1'b0;
        res_7_V_preg[11] <= 1'b0;
        res_7_V_preg[12] <= 1'b0;
        res_7_V_preg[13] <= 1'b0;
        res_7_V_preg[14] <= 1'b0;
        res_7_V_preg[15] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        res_7_V_preg[15 : 7] <= shl_ln728_7_fu_259_p3[15 : 7];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                res_8_V_preg[7] <= 1'b0;
        res_8_V_preg[8] <= 1'b0;
        res_8_V_preg[9] <= 1'b0;
        res_8_V_preg[10] <= 1'b0;
        res_8_V_preg[11] <= 1'b0;
        res_8_V_preg[12] <= 1'b0;
        res_8_V_preg[13] <= 1'b0;
        res_8_V_preg[14] <= 1'b0;
        res_8_V_preg[15] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        res_8_V_preg[15 : 7] <= shl_ln728_8_fu_268_p3[15 : 7];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                res_9_V_preg[7] <= 1'b0;
        res_9_V_preg[8] <= 1'b0;
        res_9_V_preg[9] <= 1'b0;
        res_9_V_preg[10] <= 1'b0;
        res_9_V_preg[11] <= 1'b0;
        res_9_V_preg[12] <= 1'b0;
        res_9_V_preg[13] <= 1'b0;
        res_9_V_preg[14] <= 1'b0;
        res_9_V_preg[15] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                        res_9_V_preg[15 : 7] <= shl_ln728_9_fu_277_p3[15 : 7];
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_0_V = shl_ln_fu_196_p3;
    end else begin
        res_0_V = res_0_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_0_V_ap_vld = 1'b1;
    end else begin
        res_0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_1_V = shl_ln728_1_fu_205_p3;
    end else begin
        res_1_V = res_1_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_1_V_ap_vld = 1'b1;
    end else begin
        res_1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_2_V = shl_ln728_2_fu_214_p3;
    end else begin
        res_2_V = res_2_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_2_V_ap_vld = 1'b1;
    end else begin
        res_2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_3_V = shl_ln728_3_fu_223_p3;
    end else begin
        res_3_V = res_3_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_3_V_ap_vld = 1'b1;
    end else begin
        res_3_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_4_V = shl_ln728_4_fu_232_p3;
    end else begin
        res_4_V = res_4_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_4_V_ap_vld = 1'b1;
    end else begin
        res_4_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_5_V = shl_ln728_5_fu_241_p3;
    end else begin
        res_5_V = res_5_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_5_V_ap_vld = 1'b1;
    end else begin
        res_5_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_6_V = shl_ln728_6_fu_250_p3;
    end else begin
        res_6_V = res_6_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_6_V_ap_vld = 1'b1;
    end else begin
        res_6_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_7_V = shl_ln728_7_fu_259_p3;
    end else begin
        res_7_V = res_7_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_7_V_ap_vld = 1'b1;
    end else begin
        res_7_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_8_V = shl_ln728_8_fu_268_p3;
    end else begin
        res_8_V = res_8_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_8_V_ap_vld = 1'b1;
    end else begin
        res_8_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_9_V = shl_ln728_9_fu_277_p3;
    end else begin
        res_9_V = res_9_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        res_9_V_ap_vld = 1'b1;
    end else begin
        res_9_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign shl_ln728_1_fu_205_p3 = {{data_1_V}, {7'd0}};

assign shl_ln728_2_fu_214_p3 = {{data_2_V}, {7'd0}};

assign shl_ln728_3_fu_223_p3 = {{data_3_V}, {7'd0}};

assign shl_ln728_4_fu_232_p3 = {{data_4_V}, {7'd0}};

assign shl_ln728_5_fu_241_p3 = {{data_5_V}, {7'd0}};

assign shl_ln728_6_fu_250_p3 = {{data_6_V}, {7'd0}};

assign shl_ln728_7_fu_259_p3 = {{data_7_V}, {7'd0}};

assign shl_ln728_8_fu_268_p3 = {{data_8_V}, {7'd0}};

assign shl_ln728_9_fu_277_p3 = {{data_9_V}, {7'd0}};

assign shl_ln_fu_196_p3 = {{data_0_V}, {7'd0}};

always @ (posedge ap_clk) begin
    res_0_V_preg[6:0] <= 7'b0000000;
    res_1_V_preg[6:0] <= 7'b0000000;
    res_2_V_preg[6:0] <= 7'b0000000;
    res_3_V_preg[6:0] <= 7'b0000000;
    res_4_V_preg[6:0] <= 7'b0000000;
    res_5_V_preg[6:0] <= 7'b0000000;
    res_6_V_preg[6:0] <= 7'b0000000;
    res_7_V_preg[6:0] <= 7'b0000000;
    res_8_V_preg[6:0] <= 7'b0000000;
    res_9_V_preg[6:0] <= 7'b0000000;
end

endmodule //linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config9_s
