// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module softmax_latency_ap_fixed_ap_fixed_softmax_config10_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_0_V,
        data_1_V,
        data_2_V,
        data_3_V,
        data_4_V,
        data_5_V,
        data_6_V,
        data_7_V,
        data_8_V,
        data_9_V,
        res_0_V,
        res_0_V_ap_vld,
        res_1_V,
        res_1_V_ap_vld,
        res_2_V,
        res_2_V_ap_vld,
        res_3_V,
        res_3_V_ap_vld,
        res_4_V,
        res_4_V_ap_vld,
        res_5_V,
        res_5_V_ap_vld,
        res_6_V,
        res_6_V_ap_vld,
        res_7_V,
        res_7_V_ap_vld,
        res_8_V,
        res_8_V_ap_vld,
        res_9_V,
        res_9_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] data_0_V;
input  [15:0] data_1_V;
input  [15:0] data_2_V;
input  [15:0] data_3_V;
input  [15:0] data_4_V;
input  [15:0] data_5_V;
input  [15:0] data_6_V;
input  [15:0] data_7_V;
input  [15:0] data_8_V;
input  [15:0] data_9_V;
output  [15:0] res_0_V;
output   res_0_V_ap_vld;
output  [15:0] res_1_V;
output   res_1_V_ap_vld;
output  [15:0] res_2_V;
output   res_2_V_ap_vld;
output  [15:0] res_3_V;
output   res_3_V_ap_vld;
output  [15:0] res_4_V;
output   res_4_V_ap_vld;
output  [15:0] res_5_V;
output   res_5_V_ap_vld;
output  [15:0] res_6_V;
output   res_6_V_ap_vld;
output  [15:0] res_7_V;
output   res_7_V_ap_vld;
output  [15:0] res_8_V;
output   res_8_V_ap_vld;
output  [15:0] res_9_V;
output   res_9_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg res_0_V_ap_vld;
reg res_1_V_ap_vld;
reg res_2_V_ap_vld;
reg res_3_V_ap_vld;
reg res_4_V_ap_vld;
reg res_5_V_ap_vld;
reg res_6_V_ap_vld;
reg res_7_V_ap_vld;
reg res_8_V_ap_vld;
reg res_9_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] exp_table1_address0;
reg    exp_table1_ce0;
wire   [16:0] exp_table1_q0;
wire   [9:0] exp_table1_address1;
reg    exp_table1_ce1;
wire   [16:0] exp_table1_q1;
wire   [9:0] exp_table1_address2;
reg    exp_table1_ce2;
wire   [16:0] exp_table1_q2;
wire   [9:0] exp_table1_address3;
reg    exp_table1_ce3;
wire   [16:0] exp_table1_q3;
wire   [9:0] exp_table1_address4;
reg    exp_table1_ce4;
wire   [16:0] exp_table1_q4;
wire   [9:0] exp_table1_address5;
reg    exp_table1_ce5;
wire   [16:0] exp_table1_q5;
wire   [9:0] exp_table1_address6;
reg    exp_table1_ce6;
wire   [16:0] exp_table1_q6;
wire   [9:0] exp_table1_address7;
reg    exp_table1_ce7;
wire   [16:0] exp_table1_q7;
wire   [9:0] exp_table1_address8;
reg    exp_table1_ce8;
wire   [16:0] exp_table1_q8;
wire   [9:0] exp_table1_address9;
reg    exp_table1_ce9;
wire   [16:0] exp_table1_q9;
wire   [9:0] invert_table2_address0;
reg    invert_table2_ce0;
wire   [17:0] invert_table2_q0;
reg   [16:0] exp_res_0_V_reg_1105;
reg   [16:0] exp_res_0_V_reg_1105_pp0_iter2_reg;
reg   [16:0] exp_res_1_V_reg_1110;
reg   [16:0] exp_res_1_V_reg_1110_pp0_iter2_reg;
reg   [16:0] exp_res_2_V_reg_1115;
reg   [16:0] exp_res_2_V_reg_1115_pp0_iter2_reg;
reg   [16:0] exp_res_3_V_reg_1120;
reg   [16:0] exp_res_3_V_reg_1120_pp0_iter2_reg;
reg   [16:0] exp_res_4_V_reg_1125;
reg   [16:0] exp_res_4_V_reg_1125_pp0_iter2_reg;
reg   [16:0] exp_res_5_V_reg_1130;
reg   [16:0] exp_res_5_V_reg_1130_pp0_iter2_reg;
reg   [16:0] exp_res_6_V_reg_1135;
reg   [16:0] exp_res_6_V_reg_1135_pp0_iter2_reg;
reg   [16:0] exp_res_7_V_reg_1140;
reg   [16:0] exp_res_7_V_reg_1140_pp0_iter2_reg;
reg   [16:0] exp_res_8_V_reg_1145;
reg   [16:0] exp_res_8_V_reg_1145_pp0_iter2_reg;
reg   [16:0] exp_res_9_V_reg_1151;
reg   [16:0] exp_res_9_V_reg_1151_pp0_iter2_reg;
wire  signed [17:0] p_Val2_44_fu_728_p3;
reg  signed [17:0] p_Val2_44_reg_1157;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln251_fu_370_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln251_1_fu_385_p1;
wire   [63:0] zext_ln251_2_fu_400_p1;
wire   [63:0] zext_ln251_3_fu_415_p1;
wire   [63:0] zext_ln251_4_fu_430_p1;
wire   [63:0] zext_ln251_5_fu_445_p1;
wire   [63:0] zext_ln251_6_fu_460_p1;
wire   [63:0] zext_ln251_7_fu_475_p1;
wire   [63:0] zext_ln251_8_fu_490_p1;
wire   [63:0] zext_ln251_9_fu_505_p1;
wire   [63:0] zext_ln259_fu_846_p1;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] y_V_fu_360_p4;
wire   [9:0] y_V_1_fu_375_p4;
wire   [9:0] y_V_2_fu_390_p4;
wire   [9:0] y_V_3_fu_405_p4;
wire   [9:0] y_V_4_fu_420_p4;
wire   [9:0] y_V_5_fu_435_p4;
wire   [9:0] y_V_6_fu_450_p4;
wire   [9:0] y_V_7_fu_465_p4;
wire   [9:0] y_V_8_fu_480_p4;
wire   [9:0] y_V_9_fu_495_p4;
wire   [17:0] zext_ln44_2_fu_510_p1;
wire   [17:0] zext_ln44_3_fu_514_p1;
wire   [17:0] p_Val2_22_fu_518_p2;
wire   [0:0] p_Result_s_fu_530_p3;
wire   [16:0] add_ln746_fu_524_p2;
wire   [16:0] p_Val2_26_fu_538_p3;
wire   [17:0] zext_ln44_4_fu_550_p1;
wire   [17:0] zext_ln44_5_fu_554_p1;
wire   [17:0] p_Val2_25_fu_558_p2;
wire   [0:0] p_Result_21_fu_570_p3;
wire   [16:0] add_ln746_1_fu_564_p2;
wire   [16:0] p_Val2_27_fu_578_p3;
wire   [17:0] zext_ln785_1_fu_586_p1;
wire   [17:0] zext_ln785_fu_546_p1;
wire   [17:0] p_Val2_28_fu_590_p2;
wire   [0:0] p_Result_22_fu_596_p3;
wire   [17:0] zext_ln44_6_fu_612_p1;
wire   [17:0] zext_ln44_7_fu_616_p1;
wire   [17:0] p_Val2_31_fu_620_p2;
wire   [0:0] p_Result_23_fu_632_p3;
wire   [16:0] add_ln746_2_fu_626_p2;
wire   [16:0] p_Val2_35_fu_640_p3;
wire   [17:0] zext_ln44_8_fu_652_p1;
wire   [17:0] zext_ln44_9_fu_656_p1;
wire   [17:0] p_Val2_34_fu_660_p2;
wire   [0:0] p_Result_24_fu_672_p3;
wire   [16:0] add_ln746_3_fu_666_p2;
wire   [16:0] p_Val2_36_fu_680_p3;
wire   [17:0] zext_ln785_3_fu_688_p1;
wire   [17:0] zext_ln785_2_fu_648_p1;
wire   [17:0] p_Val2_37_fu_692_p2;
wire   [0:0] p_Result_25_fu_698_p3;
wire   [17:0] p_Val2_39_fu_706_p3;
wire   [17:0] p_Val2_38_fu_604_p3;
wire   [17:0] p_Val2_40_fu_714_p2;
wire   [0:0] p_Result_26_fu_720_p3;
wire   [17:0] zext_ln44_1_fu_739_p1;
wire   [17:0] zext_ln44_fu_736_p1;
wire  signed [17:0] ret_V_fu_742_p2;
wire  signed [18:0] lhs_V_fu_748_p1;
wire  signed [18:0] rhs_V_fu_751_p1;
wire   [18:0] ret_V_1_fu_755_p2;
wire   [17:0] p_Val2_46_fu_769_p2;
wire   [0:0] p_Result_28_fu_774_p3;
wire   [0:0] p_Result_27_fu_761_p3;
wire   [0:0] xor_ln786_fu_782_p2;
wire   [0:0] xor_ln340_1_fu_800_p2;
wire   [0:0] xor_ln340_fu_794_p2;
wire   [9:0] tmp_fu_812_p4;
wire   [0:0] underflow_fu_788_p2;
wire   [0:0] or_ln340_fu_806_p2;
wire   [9:0] select_ln340_fu_822_p3;
wire   [9:0] select_ln388_fu_830_p3;
wire   [9:0] y_V_10_fu_838_p3;
wire  signed [25:0] mul_ln1118_fu_985_p2;
wire  signed [25:0] mul_ln1118_1_fu_992_p2;
wire  signed [25:0] mul_ln1118_2_fu_999_p2;
wire  signed [25:0] mul_ln1118_3_fu_1006_p2;
wire  signed [25:0] mul_ln1118_4_fu_1013_p2;
wire  signed [25:0] mul_ln1118_5_fu_1020_p2;
wire  signed [25:0] mul_ln1118_6_fu_1027_p2;
wire  signed [25:0] mul_ln1118_7_fu_1034_p2;
wire  signed [25:0] mul_ln1118_8_fu_1041_p2;
wire  signed [25:0] mul_ln1118_9_fu_1048_p2;
wire   [16:0] mul_ln1118_fu_985_p0;
wire  signed [17:0] mul_ln1118_fu_985_p1;
wire  signed [25:0] sext_ln1116_fu_851_p1;
wire   [16:0] mul_ln1118_1_fu_992_p0;
wire  signed [17:0] mul_ln1118_1_fu_992_p1;
wire   [16:0] mul_ln1118_2_fu_999_p0;
wire  signed [17:0] mul_ln1118_2_fu_999_p1;
wire   [16:0] mul_ln1118_3_fu_1006_p0;
wire  signed [17:0] mul_ln1118_3_fu_1006_p1;
wire   [16:0] mul_ln1118_4_fu_1013_p0;
wire  signed [17:0] mul_ln1118_4_fu_1013_p1;
wire   [16:0] mul_ln1118_5_fu_1020_p0;
wire  signed [17:0] mul_ln1118_5_fu_1020_p1;
wire   [16:0] mul_ln1118_6_fu_1027_p0;
wire  signed [17:0] mul_ln1118_6_fu_1027_p1;
wire   [16:0] mul_ln1118_7_fu_1034_p0;
wire  signed [17:0] mul_ln1118_7_fu_1034_p1;
wire   [16:0] mul_ln1118_8_fu_1041_p0;
wire  signed [17:0] mul_ln1118_8_fu_1041_p1;
wire   [16:0] mul_ln1118_9_fu_1048_p0;
wire  signed [17:0] mul_ln1118_9_fu_1048_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [25:0] mul_ln1118_1_fu_992_p00;
wire   [25:0] mul_ln1118_2_fu_999_p00;
wire   [25:0] mul_ln1118_3_fu_1006_p00;
wire   [25:0] mul_ln1118_4_fu_1013_p00;
wire   [25:0] mul_ln1118_5_fu_1020_p00;
wire   [25:0] mul_ln1118_6_fu_1027_p00;
wire   [25:0] mul_ln1118_7_fu_1034_p00;
wire   [25:0] mul_ln1118_8_fu_1041_p00;
wire   [25:0] mul_ln1118_9_fu_1048_p00;
wire   [25:0] mul_ln1118_fu_985_p00;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

softmax_latency_ap_fixed_ap_fixed_softmax_config10_s_exp_dEe #(
    .DataWidth( 17 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
exp_table1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_table1_address0),
    .ce0(exp_table1_ce0),
    .q0(exp_table1_q0),
    .address1(exp_table1_address1),
    .ce1(exp_table1_ce1),
    .q1(exp_table1_q1),
    .address2(exp_table1_address2),
    .ce2(exp_table1_ce2),
    .q2(exp_table1_q2),
    .address3(exp_table1_address3),
    .ce3(exp_table1_ce3),
    .q3(exp_table1_q3),
    .address4(exp_table1_address4),
    .ce4(exp_table1_ce4),
    .q4(exp_table1_q4),
    .address5(exp_table1_address5),
    .ce5(exp_table1_ce5),
    .q5(exp_table1_q5),
    .address6(exp_table1_address6),
    .ce6(exp_table1_ce6),
    .q6(exp_table1_q6),
    .address7(exp_table1_address7),
    .ce7(exp_table1_ce7),
    .q7(exp_table1_q7),
    .address8(exp_table1_address8),
    .ce8(exp_table1_ce8),
    .q8(exp_table1_q8),
    .address9(exp_table1_address9),
    .ce9(exp_table1_ce9),
    .q9(exp_table1_q9)
);

softmax_latency_ap_fixed_ap_fixed_softmax_config10_s_inveeOg #(
    .DataWidth( 18 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
invert_table2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(invert_table2_address0),
    .ce0(invert_table2_ce0),
    .q0(invert_table2_q0)
);

myproject_mul_mul_17ns_18s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_17ns_18s_26_1_1_U861(
    .din0(mul_ln1118_fu_985_p0),
    .din1(mul_ln1118_fu_985_p1),
    .dout(mul_ln1118_fu_985_p2)
);

myproject_mul_mul_17ns_18s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_17ns_18s_26_1_1_U862(
    .din0(mul_ln1118_1_fu_992_p0),
    .din1(mul_ln1118_1_fu_992_p1),
    .dout(mul_ln1118_1_fu_992_p2)
);

myproject_mul_mul_17ns_18s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_17ns_18s_26_1_1_U863(
    .din0(mul_ln1118_2_fu_999_p0),
    .din1(mul_ln1118_2_fu_999_p1),
    .dout(mul_ln1118_2_fu_999_p2)
);

myproject_mul_mul_17ns_18s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_17ns_18s_26_1_1_U864(
    .din0(mul_ln1118_3_fu_1006_p0),
    .din1(mul_ln1118_3_fu_1006_p1),
    .dout(mul_ln1118_3_fu_1006_p2)
);

myproject_mul_mul_17ns_18s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_17ns_18s_26_1_1_U865(
    .din0(mul_ln1118_4_fu_1013_p0),
    .din1(mul_ln1118_4_fu_1013_p1),
    .dout(mul_ln1118_4_fu_1013_p2)
);

myproject_mul_mul_17ns_18s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_17ns_18s_26_1_1_U866(
    .din0(mul_ln1118_5_fu_1020_p0),
    .din1(mul_ln1118_5_fu_1020_p1),
    .dout(mul_ln1118_5_fu_1020_p2)
);

myproject_mul_mul_17ns_18s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_17ns_18s_26_1_1_U867(
    .din0(mul_ln1118_6_fu_1027_p0),
    .din1(mul_ln1118_6_fu_1027_p1),
    .dout(mul_ln1118_6_fu_1027_p2)
);

myproject_mul_mul_17ns_18s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_17ns_18s_26_1_1_U868(
    .din0(mul_ln1118_7_fu_1034_p0),
    .din1(mul_ln1118_7_fu_1034_p1),
    .dout(mul_ln1118_7_fu_1034_p2)
);

myproject_mul_mul_17ns_18s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_17ns_18s_26_1_1_U869(
    .din0(mul_ln1118_8_fu_1041_p0),
    .din1(mul_ln1118_8_fu_1041_p1),
    .dout(mul_ln1118_8_fu_1041_p2)
);

myproject_mul_mul_17ns_18s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_17ns_18s_26_1_1_U870(
    .din0(mul_ln1118_9_fu_1048_p0),
    .din1(mul_ln1118_9_fu_1048_p1),
    .dout(mul_ln1118_9_fu_1048_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_res_0_V_reg_1105 <= exp_table1_q0;
        exp_res_1_V_reg_1110 <= exp_table1_q1;
        exp_res_2_V_reg_1115 <= exp_table1_q2;
        exp_res_3_V_reg_1120 <= exp_table1_q3;
        exp_res_4_V_reg_1125 <= exp_table1_q4;
        exp_res_5_V_reg_1130 <= exp_table1_q5;
        exp_res_6_V_reg_1135 <= exp_table1_q6;
        exp_res_7_V_reg_1140 <= exp_table1_q7;
        exp_res_8_V_reg_1145 <= exp_table1_q8;
        exp_res_9_V_reg_1151 <= exp_table1_q9;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exp_res_0_V_reg_1105_pp0_iter2_reg <= exp_res_0_V_reg_1105;
        exp_res_1_V_reg_1110_pp0_iter2_reg <= exp_res_1_V_reg_1110;
        exp_res_2_V_reg_1115_pp0_iter2_reg <= exp_res_2_V_reg_1115;
        exp_res_3_V_reg_1120_pp0_iter2_reg <= exp_res_3_V_reg_1120;
        exp_res_4_V_reg_1125_pp0_iter2_reg <= exp_res_4_V_reg_1125;
        exp_res_5_V_reg_1130_pp0_iter2_reg <= exp_res_5_V_reg_1130;
        exp_res_6_V_reg_1135_pp0_iter2_reg <= exp_res_6_V_reg_1135;
        exp_res_7_V_reg_1140_pp0_iter2_reg <= exp_res_7_V_reg_1140;
        exp_res_8_V_reg_1145_pp0_iter2_reg <= exp_res_8_V_reg_1145;
        exp_res_9_V_reg_1151_pp0_iter2_reg <= exp_res_9_V_reg_1151;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Val2_44_reg_1157 <= p_Val2_44_fu_728_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce0 = 1'b1;
    end else begin
        exp_table1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce1 = 1'b1;
    end else begin
        exp_table1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce2 = 1'b1;
    end else begin
        exp_table1_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce3 = 1'b1;
    end else begin
        exp_table1_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce4 = 1'b1;
    end else begin
        exp_table1_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce5 = 1'b1;
    end else begin
        exp_table1_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce6 = 1'b1;
    end else begin
        exp_table1_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce7 = 1'b1;
    end else begin
        exp_table1_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce8 = 1'b1;
    end else begin
        exp_table1_ce8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_table1_ce9 = 1'b1;
    end else begin
        exp_table1_ce9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        invert_table2_ce0 = 1'b1;
    end else begin
        invert_table2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_0_V_ap_vld = 1'b1;
    end else begin
        res_0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_1_V_ap_vld = 1'b1;
    end else begin
        res_1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_2_V_ap_vld = 1'b1;
    end else begin
        res_2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_3_V_ap_vld = 1'b1;
    end else begin
        res_3_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_4_V_ap_vld = 1'b1;
    end else begin
        res_4_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_5_V_ap_vld = 1'b1;
    end else begin
        res_5_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_6_V_ap_vld = 1'b1;
    end else begin
        res_6_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_7_V_ap_vld = 1'b1;
    end else begin
        res_7_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_8_V_ap_vld = 1'b1;
    end else begin
        res_8_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        res_9_V_ap_vld = 1'b1;
    end else begin
        res_9_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln746_1_fu_564_p2 = (exp_table1_q2 + exp_table1_q3);

assign add_ln746_2_fu_626_p2 = (exp_table1_q4 + exp_table1_q5);

assign add_ln746_3_fu_666_p2 = (exp_table1_q6 + exp_table1_q7);

assign add_ln746_fu_524_p2 = (exp_table1_q0 + exp_table1_q1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign exp_table1_address0 = zext_ln251_fu_370_p1;

assign exp_table1_address1 = zext_ln251_1_fu_385_p1;

assign exp_table1_address2 = zext_ln251_2_fu_400_p1;

assign exp_table1_address3 = zext_ln251_3_fu_415_p1;

assign exp_table1_address4 = zext_ln251_4_fu_430_p1;

assign exp_table1_address5 = zext_ln251_5_fu_445_p1;

assign exp_table1_address6 = zext_ln251_6_fu_460_p1;

assign exp_table1_address7 = zext_ln251_7_fu_475_p1;

assign exp_table1_address8 = zext_ln251_8_fu_490_p1;

assign exp_table1_address9 = zext_ln251_9_fu_505_p1;

assign invert_table2_address0 = zext_ln259_fu_846_p1;

assign lhs_V_fu_748_p1 = p_Val2_44_reg_1157;

assign mul_ln1118_1_fu_992_p0 = mul_ln1118_1_fu_992_p00;

assign mul_ln1118_1_fu_992_p00 = exp_res_1_V_reg_1110_pp0_iter2_reg;

assign mul_ln1118_1_fu_992_p1 = sext_ln1116_fu_851_p1;

assign mul_ln1118_2_fu_999_p0 = mul_ln1118_2_fu_999_p00;

assign mul_ln1118_2_fu_999_p00 = exp_res_2_V_reg_1115_pp0_iter2_reg;

assign mul_ln1118_2_fu_999_p1 = sext_ln1116_fu_851_p1;

assign mul_ln1118_3_fu_1006_p0 = mul_ln1118_3_fu_1006_p00;

assign mul_ln1118_3_fu_1006_p00 = exp_res_3_V_reg_1120_pp0_iter2_reg;

assign mul_ln1118_3_fu_1006_p1 = sext_ln1116_fu_851_p1;

assign mul_ln1118_4_fu_1013_p0 = mul_ln1118_4_fu_1013_p00;

assign mul_ln1118_4_fu_1013_p00 = exp_res_4_V_reg_1125_pp0_iter2_reg;

assign mul_ln1118_4_fu_1013_p1 = sext_ln1116_fu_851_p1;

assign mul_ln1118_5_fu_1020_p0 = mul_ln1118_5_fu_1020_p00;

assign mul_ln1118_5_fu_1020_p00 = exp_res_5_V_reg_1130_pp0_iter2_reg;

assign mul_ln1118_5_fu_1020_p1 = sext_ln1116_fu_851_p1;

assign mul_ln1118_6_fu_1027_p0 = mul_ln1118_6_fu_1027_p00;

assign mul_ln1118_6_fu_1027_p00 = exp_res_6_V_reg_1135_pp0_iter2_reg;

assign mul_ln1118_6_fu_1027_p1 = sext_ln1116_fu_851_p1;

assign mul_ln1118_7_fu_1034_p0 = mul_ln1118_7_fu_1034_p00;

assign mul_ln1118_7_fu_1034_p00 = exp_res_7_V_reg_1140_pp0_iter2_reg;

assign mul_ln1118_7_fu_1034_p1 = sext_ln1116_fu_851_p1;

assign mul_ln1118_8_fu_1041_p0 = mul_ln1118_8_fu_1041_p00;

assign mul_ln1118_8_fu_1041_p00 = exp_res_8_V_reg_1145_pp0_iter2_reg;

assign mul_ln1118_8_fu_1041_p1 = sext_ln1116_fu_851_p1;

assign mul_ln1118_9_fu_1048_p0 = mul_ln1118_9_fu_1048_p00;

assign mul_ln1118_9_fu_1048_p00 = exp_res_9_V_reg_1151_pp0_iter2_reg;

assign mul_ln1118_9_fu_1048_p1 = sext_ln1116_fu_851_p1;

assign mul_ln1118_fu_985_p0 = mul_ln1118_fu_985_p00;

assign mul_ln1118_fu_985_p00 = exp_res_0_V_reg_1105_pp0_iter2_reg;

assign mul_ln1118_fu_985_p1 = sext_ln1116_fu_851_p1;

assign or_ln340_fu_806_p2 = (xor_ln340_1_fu_800_p2 | p_Result_28_fu_774_p3);

assign p_Result_21_fu_570_p3 = p_Val2_25_fu_558_p2[32'd17];

assign p_Result_22_fu_596_p3 = p_Val2_28_fu_590_p2[32'd17];

assign p_Result_23_fu_632_p3 = p_Val2_31_fu_620_p2[32'd17];

assign p_Result_24_fu_672_p3 = p_Val2_34_fu_660_p2[32'd17];

assign p_Result_25_fu_698_p3 = p_Val2_37_fu_692_p2[32'd17];

assign p_Result_26_fu_720_p3 = p_Val2_40_fu_714_p2[32'd17];

assign p_Result_27_fu_761_p3 = ret_V_1_fu_755_p2[32'd18];

assign p_Result_28_fu_774_p3 = p_Val2_46_fu_769_p2[32'd17];

assign p_Result_s_fu_530_p3 = p_Val2_22_fu_518_p2[32'd17];

assign p_Val2_22_fu_518_p2 = (zext_ln44_2_fu_510_p1 + zext_ln44_3_fu_514_p1);

assign p_Val2_25_fu_558_p2 = (zext_ln44_4_fu_550_p1 + zext_ln44_5_fu_554_p1);

assign p_Val2_26_fu_538_p3 = ((p_Result_s_fu_530_p3[0:0] === 1'b1) ? 17'd131071 : add_ln746_fu_524_p2);

assign p_Val2_27_fu_578_p3 = ((p_Result_21_fu_570_p3[0:0] === 1'b1) ? 17'd131071 : add_ln746_1_fu_564_p2);

assign p_Val2_28_fu_590_p2 = (zext_ln785_1_fu_586_p1 + zext_ln785_fu_546_p1);

assign p_Val2_31_fu_620_p2 = (zext_ln44_6_fu_612_p1 + zext_ln44_7_fu_616_p1);

assign p_Val2_34_fu_660_p2 = (zext_ln44_8_fu_652_p1 + zext_ln44_9_fu_656_p1);

assign p_Val2_35_fu_640_p3 = ((p_Result_23_fu_632_p3[0:0] === 1'b1) ? 17'd131071 : add_ln746_2_fu_626_p2);

assign p_Val2_36_fu_680_p3 = ((p_Result_24_fu_672_p3[0:0] === 1'b1) ? 17'd131071 : add_ln746_3_fu_666_p2);

assign p_Val2_37_fu_692_p2 = (zext_ln785_3_fu_688_p1 + zext_ln785_2_fu_648_p1);

assign p_Val2_38_fu_604_p3 = ((p_Result_22_fu_596_p3[0:0] === 1'b1) ? 18'd131071 : p_Val2_28_fu_590_p2);

assign p_Val2_39_fu_706_p3 = ((p_Result_25_fu_698_p3[0:0] === 1'b1) ? 18'd131071 : p_Val2_37_fu_692_p2);

assign p_Val2_40_fu_714_p2 = (p_Val2_39_fu_706_p3 + p_Val2_38_fu_604_p3);

assign p_Val2_44_fu_728_p3 = ((p_Result_26_fu_720_p3[0:0] === 1'b1) ? 18'd131071 : p_Val2_40_fu_714_p2);

assign p_Val2_46_fu_769_p2 = ($signed(ret_V_fu_742_p2) + $signed(p_Val2_44_reg_1157));

assign res_0_V = {{mul_ln1118_fu_985_p2[25:10]}};

assign res_1_V = {{mul_ln1118_1_fu_992_p2[25:10]}};

assign res_2_V = {{mul_ln1118_2_fu_999_p2[25:10]}};

assign res_3_V = {{mul_ln1118_3_fu_1006_p2[25:10]}};

assign res_4_V = {{mul_ln1118_4_fu_1013_p2[25:10]}};

assign res_5_V = {{mul_ln1118_5_fu_1020_p2[25:10]}};

assign res_6_V = {{mul_ln1118_6_fu_1027_p2[25:10]}};

assign res_7_V = {{mul_ln1118_7_fu_1034_p2[25:10]}};

assign res_8_V = {{mul_ln1118_8_fu_1041_p2[25:10]}};

assign res_9_V = {{mul_ln1118_9_fu_1048_p2[25:10]}};

assign ret_V_1_fu_755_p2 = ($signed(lhs_V_fu_748_p1) + $signed(rhs_V_fu_751_p1));

assign ret_V_fu_742_p2 = (zext_ln44_1_fu_739_p1 + zext_ln44_fu_736_p1);

assign rhs_V_fu_751_p1 = ret_V_fu_742_p2;

assign select_ln340_fu_822_p3 = ((xor_ln340_fu_794_p2[0:0] === 1'b1) ? 10'd511 : tmp_fu_812_p4);

assign select_ln388_fu_830_p3 = ((underflow_fu_788_p2[0:0] === 1'b1) ? 10'd512 : tmp_fu_812_p4);

assign sext_ln1116_fu_851_p1 = $signed(invert_table2_q0);

assign tmp_fu_812_p4 = {{p_Val2_46_fu_769_p2[17:8]}};

assign underflow_fu_788_p2 = (xor_ln786_fu_782_p2 & p_Result_27_fu_761_p3);

assign xor_ln340_1_fu_800_p2 = (p_Result_27_fu_761_p3 ^ 1'd1);

assign xor_ln340_fu_794_p2 = (p_Result_28_fu_774_p3 ^ p_Result_27_fu_761_p3);

assign xor_ln786_fu_782_p2 = (p_Result_28_fu_774_p3 ^ 1'd1);

assign y_V_10_fu_838_p3 = ((or_ln340_fu_806_p2[0:0] === 1'b1) ? select_ln340_fu_822_p3 : select_ln388_fu_830_p3);

assign y_V_1_fu_375_p4 = {{data_1_V[15:6]}};

assign y_V_2_fu_390_p4 = {{data_2_V[15:6]}};

assign y_V_3_fu_405_p4 = {{data_3_V[15:6]}};

assign y_V_4_fu_420_p4 = {{data_4_V[15:6]}};

assign y_V_5_fu_435_p4 = {{data_5_V[15:6]}};

assign y_V_6_fu_450_p4 = {{data_6_V[15:6]}};

assign y_V_7_fu_465_p4 = {{data_7_V[15:6]}};

assign y_V_8_fu_480_p4 = {{data_8_V[15:6]}};

assign y_V_9_fu_495_p4 = {{data_9_V[15:6]}};

assign y_V_fu_360_p4 = {{data_0_V[15:6]}};

assign zext_ln251_1_fu_385_p1 = y_V_1_fu_375_p4;

assign zext_ln251_2_fu_400_p1 = y_V_2_fu_390_p4;

assign zext_ln251_3_fu_415_p1 = y_V_3_fu_405_p4;

assign zext_ln251_4_fu_430_p1 = y_V_4_fu_420_p4;

assign zext_ln251_5_fu_445_p1 = y_V_5_fu_435_p4;

assign zext_ln251_6_fu_460_p1 = y_V_6_fu_450_p4;

assign zext_ln251_7_fu_475_p1 = y_V_7_fu_465_p4;

assign zext_ln251_8_fu_490_p1 = y_V_8_fu_480_p4;

assign zext_ln251_9_fu_505_p1 = y_V_9_fu_495_p4;

assign zext_ln251_fu_370_p1 = y_V_fu_360_p4;

assign zext_ln259_fu_846_p1 = y_V_10_fu_838_p3;

assign zext_ln44_1_fu_739_p1 = exp_res_8_V_reg_1145;

assign zext_ln44_2_fu_510_p1 = exp_table1_q1;

assign zext_ln44_3_fu_514_p1 = exp_table1_q0;

assign zext_ln44_4_fu_550_p1 = exp_table1_q3;

assign zext_ln44_5_fu_554_p1 = exp_table1_q2;

assign zext_ln44_6_fu_612_p1 = exp_table1_q5;

assign zext_ln44_7_fu_616_p1 = exp_table1_q4;

assign zext_ln44_8_fu_652_p1 = exp_table1_q7;

assign zext_ln44_9_fu_656_p1 = exp_table1_q6;

assign zext_ln44_fu_736_p1 = exp_res_9_V_reg_1151;

assign zext_ln785_1_fu_586_p1 = p_Val2_27_fu_578_p3;

assign zext_ln785_2_fu_648_p1 = p_Val2_35_fu_640_p3;

assign zext_ln785_3_fu_688_p1 = p_Val2_36_fu_680_p3;

assign zext_ln785_fu_546_p1 = p_Val2_26_fu_538_p3;

endmodule //softmax_latency_ap_fixed_ap_fixed_softmax_config10_s
