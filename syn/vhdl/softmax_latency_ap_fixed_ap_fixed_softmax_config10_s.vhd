-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax_latency_ap_fixed_ap_fixed_softmax_config10_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_V : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_V : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_V : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_V : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_V : IN STD_LOGIC_VECTOR (15 downto 0);
    data_5_V : IN STD_LOGIC_VECTOR (15 downto 0);
    data_6_V : IN STD_LOGIC_VECTOR (15 downto 0);
    data_7_V : IN STD_LOGIC_VECTOR (15 downto 0);
    data_8_V : IN STD_LOGIC_VECTOR (15 downto 0);
    data_9_V : IN STD_LOGIC_VECTOR (15 downto 0);
    res_0_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_0_V_ap_vld : OUT STD_LOGIC;
    res_1_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_1_V_ap_vld : OUT STD_LOGIC;
    res_2_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_2_V_ap_vld : OUT STD_LOGIC;
    res_3_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_3_V_ap_vld : OUT STD_LOGIC;
    res_4_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_4_V_ap_vld : OUT STD_LOGIC;
    res_5_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_5_V_ap_vld : OUT STD_LOGIC;
    res_6_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_6_V_ap_vld : OUT STD_LOGIC;
    res_7_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_7_V_ap_vld : OUT STD_LOGIC;
    res_8_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_8_V_ap_vld : OUT STD_LOGIC;
    res_9_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_9_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of softmax_latency_ap_fixed_ap_fixed_softmax_config10_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv18_1FFFF : STD_LOGIC_VECTOR (17 downto 0) := "011111111111111111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exp_table1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce0 : STD_LOGIC;
    signal exp_table1_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce1 : STD_LOGIC;
    signal exp_table1_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce2 : STD_LOGIC;
    signal exp_table1_q2 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce3 : STD_LOGIC;
    signal exp_table1_q3 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce4 : STD_LOGIC;
    signal exp_table1_q4 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address5 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce5 : STD_LOGIC;
    signal exp_table1_q5 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address6 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce6 : STD_LOGIC;
    signal exp_table1_q6 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address7 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce7 : STD_LOGIC;
    signal exp_table1_q7 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address8 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce8 : STD_LOGIC;
    signal exp_table1_q8 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_table1_address9 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce9 : STD_LOGIC;
    signal exp_table1_q9 : STD_LOGIC_VECTOR (16 downto 0);
    signal invert_table2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table2_ce0 : STD_LOGIC;
    signal invert_table2_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_0_V_reg_1105 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_0_V_reg_1105_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_1110 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_1_V_reg_1110_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_1115 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_2_V_reg_1115_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_1120 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_3_V_reg_1120_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_4_V_reg_1125 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_4_V_reg_1125_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_5_V_reg_1130 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_5_V_reg_1130_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_6_V_reg_1135 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_6_V_reg_1135_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_7_V_reg_1140 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_7_V_reg_1140_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_8_V_reg_1145 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_8_V_reg_1145_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_9_V_reg_1151 : STD_LOGIC_VECTOR (16 downto 0);
    signal exp_res_9_V_reg_1151_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_44_fu_728_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_44_reg_1157 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln251_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln251_1_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_2_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_3_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_4_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_5_fu_445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_6_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_7_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_8_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_9_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln259_fu_846_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal y_V_fu_360_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_1_fu_375_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_fu_390_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_fu_405_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_4_fu_420_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_5_fu_435_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_6_fu_450_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_7_fu_465_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_8_fu_480_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_9_fu_495_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln44_2_fu_510_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln44_3_fu_514_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_22_fu_518_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_s_fu_530_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln746_fu_524_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_26_fu_538_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln44_4_fu_550_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln44_5_fu_554_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_25_fu_558_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_21_fu_570_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln746_1_fu_564_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_27_fu_578_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln785_1_fu_586_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln785_fu_546_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_28_fu_590_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_22_fu_596_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln44_6_fu_612_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln44_7_fu_616_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_31_fu_620_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_23_fu_632_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln746_2_fu_626_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_35_fu_640_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln44_8_fu_652_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln44_9_fu_656_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_34_fu_660_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_24_fu_672_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln746_3_fu_666_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Val2_36_fu_680_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln785_3_fu_688_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln785_2_fu_648_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_37_fu_692_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_25_fu_698_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_39_fu_706_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_38_fu_604_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_40_fu_714_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_26_fu_720_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln44_1_fu_739_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln44_fu_736_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_fu_742_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_V_fu_748_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_fu_751_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_1_fu_755_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_46_fu_769_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_28_fu_774_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_27_fu_761_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_782_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_794_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_812_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal underflow_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_822_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_fu_830_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_10_fu_838_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln1118_fu_985_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_1_fu_992_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_2_fu_999_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_3_fu_1006_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_4_fu_1013_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_5_fu_1020_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_6_fu_1027_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_7_fu_1034_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_8_fu_1041_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_9_fu_1048_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_fu_985_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_fu_985_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1116_fu_851_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_1_fu_992_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_1_fu_992_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_2_fu_999_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_2_fu_999_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_3_fu_1006_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_3_fu_1006_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_4_fu_1013_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_4_fu_1013_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_5_fu_1020_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_5_fu_1020_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_6_fu_1027_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_6_fu_1027_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_7_fu_1034_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_7_fu_1034_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_8_fu_1041_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_8_fu_1041_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln1118_9_fu_1048_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_9_fu_1048_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln1118_1_fu_992_p00 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_2_fu_999_p00 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_3_fu_1006_p00 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_4_fu_1013_p00 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_5_fu_1020_p00 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_6_fu_1027_p00 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_7_fu_1034_p00 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_8_fu_1041_p00 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_9_fu_1048_p00 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_fu_985_p00 : STD_LOGIC_VECTOR (25 downto 0);

    component myproject_mul_mul_17ns_18s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component softmax_latency_ap_fixed_ap_fixed_softmax_config10_s_exp_dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address5 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address6 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address7 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address8 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address9 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component softmax_latency_ap_fixed_ap_fixed_softmax_config10_s_inveeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table1_U : component softmax_latency_ap_fixed_ap_fixed_softmax_config10_s_exp_dEe
    generic map (
        DataWidth => 17,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table1_address0,
        ce0 => exp_table1_ce0,
        q0 => exp_table1_q0,
        address1 => exp_table1_address1,
        ce1 => exp_table1_ce1,
        q1 => exp_table1_q1,
        address2 => exp_table1_address2,
        ce2 => exp_table1_ce2,
        q2 => exp_table1_q2,
        address3 => exp_table1_address3,
        ce3 => exp_table1_ce3,
        q3 => exp_table1_q3,
        address4 => exp_table1_address4,
        ce4 => exp_table1_ce4,
        q4 => exp_table1_q4,
        address5 => exp_table1_address5,
        ce5 => exp_table1_ce5,
        q5 => exp_table1_q5,
        address6 => exp_table1_address6,
        ce6 => exp_table1_ce6,
        q6 => exp_table1_q6,
        address7 => exp_table1_address7,
        ce7 => exp_table1_ce7,
        q7 => exp_table1_q7,
        address8 => exp_table1_address8,
        ce8 => exp_table1_ce8,
        q8 => exp_table1_q8,
        address9 => exp_table1_address9,
        ce9 => exp_table1_ce9,
        q9 => exp_table1_q9);

    invert_table2_U : component softmax_latency_ap_fixed_ap_fixed_softmax_config10_s_inveeOg
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table2_address0,
        ce0 => invert_table2_ce0,
        q0 => invert_table2_q0);

    myproject_mul_mul_17ns_18s_26_1_1_U861 : component myproject_mul_mul_17ns_18s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 18,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_fu_985_p0,
        din1 => mul_ln1118_fu_985_p1,
        dout => mul_ln1118_fu_985_p2);

    myproject_mul_mul_17ns_18s_26_1_1_U862 : component myproject_mul_mul_17ns_18s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 18,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_1_fu_992_p0,
        din1 => mul_ln1118_1_fu_992_p1,
        dout => mul_ln1118_1_fu_992_p2);

    myproject_mul_mul_17ns_18s_26_1_1_U863 : component myproject_mul_mul_17ns_18s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 18,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_2_fu_999_p0,
        din1 => mul_ln1118_2_fu_999_p1,
        dout => mul_ln1118_2_fu_999_p2);

    myproject_mul_mul_17ns_18s_26_1_1_U864 : component myproject_mul_mul_17ns_18s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 18,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_3_fu_1006_p0,
        din1 => mul_ln1118_3_fu_1006_p1,
        dout => mul_ln1118_3_fu_1006_p2);

    myproject_mul_mul_17ns_18s_26_1_1_U865 : component myproject_mul_mul_17ns_18s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 18,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_4_fu_1013_p0,
        din1 => mul_ln1118_4_fu_1013_p1,
        dout => mul_ln1118_4_fu_1013_p2);

    myproject_mul_mul_17ns_18s_26_1_1_U866 : component myproject_mul_mul_17ns_18s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 18,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_5_fu_1020_p0,
        din1 => mul_ln1118_5_fu_1020_p1,
        dout => mul_ln1118_5_fu_1020_p2);

    myproject_mul_mul_17ns_18s_26_1_1_U867 : component myproject_mul_mul_17ns_18s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 18,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_6_fu_1027_p0,
        din1 => mul_ln1118_6_fu_1027_p1,
        dout => mul_ln1118_6_fu_1027_p2);

    myproject_mul_mul_17ns_18s_26_1_1_U868 : component myproject_mul_mul_17ns_18s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 18,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_7_fu_1034_p0,
        din1 => mul_ln1118_7_fu_1034_p1,
        dout => mul_ln1118_7_fu_1034_p2);

    myproject_mul_mul_17ns_18s_26_1_1_U869 : component myproject_mul_mul_17ns_18s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 18,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_8_fu_1041_p0,
        din1 => mul_ln1118_8_fu_1041_p1,
        dout => mul_ln1118_8_fu_1041_p2);

    myproject_mul_mul_17ns_18s_26_1_1_U870 : component myproject_mul_mul_17ns_18s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 18,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_9_fu_1048_p0,
        din1 => mul_ln1118_9_fu_1048_p1,
        dout => mul_ln1118_9_fu_1048_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exp_res_0_V_reg_1105 <= exp_table1_q0;
                exp_res_1_V_reg_1110 <= exp_table1_q1;
                exp_res_2_V_reg_1115 <= exp_table1_q2;
                exp_res_3_V_reg_1120 <= exp_table1_q3;
                exp_res_4_V_reg_1125 <= exp_table1_q4;
                exp_res_5_V_reg_1130 <= exp_table1_q5;
                exp_res_6_V_reg_1135 <= exp_table1_q6;
                exp_res_7_V_reg_1140 <= exp_table1_q7;
                exp_res_8_V_reg_1145 <= exp_table1_q8;
                exp_res_9_V_reg_1151 <= exp_table1_q9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exp_res_0_V_reg_1105_pp0_iter2_reg <= exp_res_0_V_reg_1105;
                exp_res_1_V_reg_1110_pp0_iter2_reg <= exp_res_1_V_reg_1110;
                exp_res_2_V_reg_1115_pp0_iter2_reg <= exp_res_2_V_reg_1115;
                exp_res_3_V_reg_1120_pp0_iter2_reg <= exp_res_3_V_reg_1120;
                exp_res_4_V_reg_1125_pp0_iter2_reg <= exp_res_4_V_reg_1125;
                exp_res_5_V_reg_1130_pp0_iter2_reg <= exp_res_5_V_reg_1130;
                exp_res_6_V_reg_1135_pp0_iter2_reg <= exp_res_6_V_reg_1135;
                exp_res_7_V_reg_1140_pp0_iter2_reg <= exp_res_7_V_reg_1140;
                exp_res_8_V_reg_1145_pp0_iter2_reg <= exp_res_8_V_reg_1145;
                exp_res_9_V_reg_1151_pp0_iter2_reg <= exp_res_9_V_reg_1151;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Val2_44_reg_1157 <= p_Val2_44_fu_728_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln746_1_fu_564_p2 <= std_logic_vector(unsigned(exp_table1_q2) + unsigned(exp_table1_q3));
    add_ln746_2_fu_626_p2 <= std_logic_vector(unsigned(exp_table1_q4) + unsigned(exp_table1_q5));
    add_ln746_3_fu_666_p2 <= std_logic_vector(unsigned(exp_table1_q6) + unsigned(exp_table1_q7));
    add_ln746_fu_524_p2 <= std_logic_vector(unsigned(exp_table1_q0) + unsigned(exp_table1_q1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_table1_address0 <= zext_ln251_fu_370_p1(10 - 1 downto 0);
    exp_table1_address1 <= zext_ln251_1_fu_385_p1(10 - 1 downto 0);
    exp_table1_address2 <= zext_ln251_2_fu_400_p1(10 - 1 downto 0);
    exp_table1_address3 <= zext_ln251_3_fu_415_p1(10 - 1 downto 0);
    exp_table1_address4 <= zext_ln251_4_fu_430_p1(10 - 1 downto 0);
    exp_table1_address5 <= zext_ln251_5_fu_445_p1(10 - 1 downto 0);
    exp_table1_address6 <= zext_ln251_6_fu_460_p1(10 - 1 downto 0);
    exp_table1_address7 <= zext_ln251_7_fu_475_p1(10 - 1 downto 0);
    exp_table1_address8 <= zext_ln251_8_fu_490_p1(10 - 1 downto 0);
    exp_table1_address9 <= zext_ln251_9_fu_505_p1(10 - 1 downto 0);

    exp_table1_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce0 <= ap_const_logic_1;
        else 
            exp_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce1_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce1 <= ap_const_logic_1;
        else 
            exp_table1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce2_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce2 <= ap_const_logic_1;
        else 
            exp_table1_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce3_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce3 <= ap_const_logic_1;
        else 
            exp_table1_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce4_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce4 <= ap_const_logic_1;
        else 
            exp_table1_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce5_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce5 <= ap_const_logic_1;
        else 
            exp_table1_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce6_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce6 <= ap_const_logic_1;
        else 
            exp_table1_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce7_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce7 <= ap_const_logic_1;
        else 
            exp_table1_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce8_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce8 <= ap_const_logic_1;
        else 
            exp_table1_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce9_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce9 <= ap_const_logic_1;
        else 
            exp_table1_ce9 <= ap_const_logic_0;
        end if; 
    end process;

    invert_table2_address0 <= zext_ln259_fu_846_p1(10 - 1 downto 0);

    invert_table2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            invert_table2_ce0 <= ap_const_logic_1;
        else 
            invert_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        lhs_V_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_44_reg_1157),19));

    mul_ln1118_1_fu_992_p0 <= mul_ln1118_1_fu_992_p00(17 - 1 downto 0);
    mul_ln1118_1_fu_992_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_1_V_reg_1110_pp0_iter2_reg),26));
    mul_ln1118_1_fu_992_p1 <= sext_ln1116_fu_851_p1(18 - 1 downto 0);
    mul_ln1118_2_fu_999_p0 <= mul_ln1118_2_fu_999_p00(17 - 1 downto 0);
    mul_ln1118_2_fu_999_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_2_V_reg_1115_pp0_iter2_reg),26));
    mul_ln1118_2_fu_999_p1 <= sext_ln1116_fu_851_p1(18 - 1 downto 0);
    mul_ln1118_3_fu_1006_p0 <= mul_ln1118_3_fu_1006_p00(17 - 1 downto 0);
    mul_ln1118_3_fu_1006_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_3_V_reg_1120_pp0_iter2_reg),26));
    mul_ln1118_3_fu_1006_p1 <= sext_ln1116_fu_851_p1(18 - 1 downto 0);
    mul_ln1118_4_fu_1013_p0 <= mul_ln1118_4_fu_1013_p00(17 - 1 downto 0);
    mul_ln1118_4_fu_1013_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_4_V_reg_1125_pp0_iter2_reg),26));
    mul_ln1118_4_fu_1013_p1 <= sext_ln1116_fu_851_p1(18 - 1 downto 0);
    mul_ln1118_5_fu_1020_p0 <= mul_ln1118_5_fu_1020_p00(17 - 1 downto 0);
    mul_ln1118_5_fu_1020_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_5_V_reg_1130_pp0_iter2_reg),26));
    mul_ln1118_5_fu_1020_p1 <= sext_ln1116_fu_851_p1(18 - 1 downto 0);
    mul_ln1118_6_fu_1027_p0 <= mul_ln1118_6_fu_1027_p00(17 - 1 downto 0);
    mul_ln1118_6_fu_1027_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_6_V_reg_1135_pp0_iter2_reg),26));
    mul_ln1118_6_fu_1027_p1 <= sext_ln1116_fu_851_p1(18 - 1 downto 0);
    mul_ln1118_7_fu_1034_p0 <= mul_ln1118_7_fu_1034_p00(17 - 1 downto 0);
    mul_ln1118_7_fu_1034_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_7_V_reg_1140_pp0_iter2_reg),26));
    mul_ln1118_7_fu_1034_p1 <= sext_ln1116_fu_851_p1(18 - 1 downto 0);
    mul_ln1118_8_fu_1041_p0 <= mul_ln1118_8_fu_1041_p00(17 - 1 downto 0);
    mul_ln1118_8_fu_1041_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_8_V_reg_1145_pp0_iter2_reg),26));
    mul_ln1118_8_fu_1041_p1 <= sext_ln1116_fu_851_p1(18 - 1 downto 0);
    mul_ln1118_9_fu_1048_p0 <= mul_ln1118_9_fu_1048_p00(17 - 1 downto 0);
    mul_ln1118_9_fu_1048_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_9_V_reg_1151_pp0_iter2_reg),26));
    mul_ln1118_9_fu_1048_p1 <= sext_ln1116_fu_851_p1(18 - 1 downto 0);
    mul_ln1118_fu_985_p0 <= mul_ln1118_fu_985_p00(17 - 1 downto 0);
    mul_ln1118_fu_985_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_0_V_reg_1105_pp0_iter2_reg),26));
    mul_ln1118_fu_985_p1 <= sext_ln1116_fu_851_p1(18 - 1 downto 0);
    or_ln340_fu_806_p2 <= (xor_ln340_1_fu_800_p2 or p_Result_28_fu_774_p3);
    p_Result_21_fu_570_p3 <= p_Val2_25_fu_558_p2(17 downto 17);
    p_Result_22_fu_596_p3 <= p_Val2_28_fu_590_p2(17 downto 17);
    p_Result_23_fu_632_p3 <= p_Val2_31_fu_620_p2(17 downto 17);
    p_Result_24_fu_672_p3 <= p_Val2_34_fu_660_p2(17 downto 17);
    p_Result_25_fu_698_p3 <= p_Val2_37_fu_692_p2(17 downto 17);
    p_Result_26_fu_720_p3 <= p_Val2_40_fu_714_p2(17 downto 17);
    p_Result_27_fu_761_p3 <= ret_V_1_fu_755_p2(18 downto 18);
    p_Result_28_fu_774_p3 <= p_Val2_46_fu_769_p2(17 downto 17);
    p_Result_s_fu_530_p3 <= p_Val2_22_fu_518_p2(17 downto 17);
    p_Val2_22_fu_518_p2 <= std_logic_vector(unsigned(zext_ln44_2_fu_510_p1) + unsigned(zext_ln44_3_fu_514_p1));
    p_Val2_25_fu_558_p2 <= std_logic_vector(unsigned(zext_ln44_4_fu_550_p1) + unsigned(zext_ln44_5_fu_554_p1));
    p_Val2_26_fu_538_p3 <= 
        ap_const_lv17_1FFFF when (p_Result_s_fu_530_p3(0) = '1') else 
        add_ln746_fu_524_p2;
    p_Val2_27_fu_578_p3 <= 
        ap_const_lv17_1FFFF when (p_Result_21_fu_570_p3(0) = '1') else 
        add_ln746_1_fu_564_p2;
    p_Val2_28_fu_590_p2 <= std_logic_vector(unsigned(zext_ln785_1_fu_586_p1) + unsigned(zext_ln785_fu_546_p1));
    p_Val2_31_fu_620_p2 <= std_logic_vector(unsigned(zext_ln44_6_fu_612_p1) + unsigned(zext_ln44_7_fu_616_p1));
    p_Val2_34_fu_660_p2 <= std_logic_vector(unsigned(zext_ln44_8_fu_652_p1) + unsigned(zext_ln44_9_fu_656_p1));
    p_Val2_35_fu_640_p3 <= 
        ap_const_lv17_1FFFF when (p_Result_23_fu_632_p3(0) = '1') else 
        add_ln746_2_fu_626_p2;
    p_Val2_36_fu_680_p3 <= 
        ap_const_lv17_1FFFF when (p_Result_24_fu_672_p3(0) = '1') else 
        add_ln746_3_fu_666_p2;
    p_Val2_37_fu_692_p2 <= std_logic_vector(unsigned(zext_ln785_3_fu_688_p1) + unsigned(zext_ln785_2_fu_648_p1));
    p_Val2_38_fu_604_p3 <= 
        ap_const_lv18_1FFFF when (p_Result_22_fu_596_p3(0) = '1') else 
        p_Val2_28_fu_590_p2;
    p_Val2_39_fu_706_p3 <= 
        ap_const_lv18_1FFFF when (p_Result_25_fu_698_p3(0) = '1') else 
        p_Val2_37_fu_692_p2;
    p_Val2_40_fu_714_p2 <= std_logic_vector(unsigned(p_Val2_39_fu_706_p3) + unsigned(p_Val2_38_fu_604_p3));
    p_Val2_44_fu_728_p3 <= 
        ap_const_lv18_1FFFF when (p_Result_26_fu_720_p3(0) = '1') else 
        p_Val2_40_fu_714_p2;
    p_Val2_46_fu_769_p2 <= std_logic_vector(signed(ret_V_fu_742_p2) + signed(p_Val2_44_reg_1157));
    res_0_V <= mul_ln1118_fu_985_p2(25 downto 10);

    res_0_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_0_V_ap_vld <= ap_const_logic_1;
        else 
            res_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_1_V <= mul_ln1118_1_fu_992_p2(25 downto 10);

    res_1_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_1_V_ap_vld <= ap_const_logic_1;
        else 
            res_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_2_V <= mul_ln1118_2_fu_999_p2(25 downto 10);

    res_2_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_2_V_ap_vld <= ap_const_logic_1;
        else 
            res_2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_3_V <= mul_ln1118_3_fu_1006_p2(25 downto 10);

    res_3_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_3_V_ap_vld <= ap_const_logic_1;
        else 
            res_3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_4_V <= mul_ln1118_4_fu_1013_p2(25 downto 10);

    res_4_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_4_V_ap_vld <= ap_const_logic_1;
        else 
            res_4_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_5_V <= mul_ln1118_5_fu_1020_p2(25 downto 10);

    res_5_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_5_V_ap_vld <= ap_const_logic_1;
        else 
            res_5_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_6_V <= mul_ln1118_6_fu_1027_p2(25 downto 10);

    res_6_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_6_V_ap_vld <= ap_const_logic_1;
        else 
            res_6_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_7_V <= mul_ln1118_7_fu_1034_p2(25 downto 10);

    res_7_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_7_V_ap_vld <= ap_const_logic_1;
        else 
            res_7_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_8_V <= mul_ln1118_8_fu_1041_p2(25 downto 10);

    res_8_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_8_V_ap_vld <= ap_const_logic_1;
        else 
            res_8_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_9_V <= mul_ln1118_9_fu_1048_p2(25 downto 10);

    res_9_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            res_9_V_ap_vld <= ap_const_logic_1;
        else 
            res_9_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_1_fu_755_p2 <= std_logic_vector(signed(lhs_V_fu_748_p1) + signed(rhs_V_fu_751_p1));
    ret_V_fu_742_p2 <= std_logic_vector(unsigned(zext_ln44_1_fu_739_p1) + unsigned(zext_ln44_fu_736_p1));
        rhs_V_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_fu_742_p2),19));

    select_ln340_fu_822_p3 <= 
        ap_const_lv10_1FF when (xor_ln340_fu_794_p2(0) = '1') else 
        tmp_fu_812_p4;
    select_ln388_fu_830_p3 <= 
        ap_const_lv10_200 when (underflow_fu_788_p2(0) = '1') else 
        tmp_fu_812_p4;
        sext_ln1116_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(invert_table2_q0),26));

    tmp_fu_812_p4 <= p_Val2_46_fu_769_p2(17 downto 8);
    underflow_fu_788_p2 <= (xor_ln786_fu_782_p2 and p_Result_27_fu_761_p3);
    xor_ln340_1_fu_800_p2 <= (p_Result_27_fu_761_p3 xor ap_const_lv1_1);
    xor_ln340_fu_794_p2 <= (p_Result_28_fu_774_p3 xor p_Result_27_fu_761_p3);
    xor_ln786_fu_782_p2 <= (p_Result_28_fu_774_p3 xor ap_const_lv1_1);
    y_V_10_fu_838_p3 <= 
        select_ln340_fu_822_p3 when (or_ln340_fu_806_p2(0) = '1') else 
        select_ln388_fu_830_p3;
    y_V_1_fu_375_p4 <= data_1_V(15 downto 6);
    y_V_2_fu_390_p4 <= data_2_V(15 downto 6);
    y_V_3_fu_405_p4 <= data_3_V(15 downto 6);
    y_V_4_fu_420_p4 <= data_4_V(15 downto 6);
    y_V_5_fu_435_p4 <= data_5_V(15 downto 6);
    y_V_6_fu_450_p4 <= data_6_V(15 downto 6);
    y_V_7_fu_465_p4 <= data_7_V(15 downto 6);
    y_V_8_fu_480_p4 <= data_8_V(15 downto 6);
    y_V_9_fu_495_p4 <= data_9_V(15 downto 6);
    y_V_fu_360_p4 <= data_0_V(15 downto 6);
    zext_ln251_1_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_1_fu_375_p4),64));
    zext_ln251_2_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_2_fu_390_p4),64));
    zext_ln251_3_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_3_fu_405_p4),64));
    zext_ln251_4_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_4_fu_420_p4),64));
    zext_ln251_5_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_5_fu_435_p4),64));
    zext_ln251_6_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_6_fu_450_p4),64));
    zext_ln251_7_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_7_fu_465_p4),64));
    zext_ln251_8_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_8_fu_480_p4),64));
    zext_ln251_9_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_9_fu_495_p4),64));
    zext_ln251_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_fu_360_p4),64));
    zext_ln259_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_10_fu_838_p3),64));
    zext_ln44_1_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_8_V_reg_1145),18));
    zext_ln44_2_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table1_q1),18));
    zext_ln44_3_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table1_q0),18));
    zext_ln44_4_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table1_q3),18));
    zext_ln44_5_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table1_q2),18));
    zext_ln44_6_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table1_q5),18));
    zext_ln44_7_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table1_q4),18));
    zext_ln44_8_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table1_q7),18));
    zext_ln44_9_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_table1_q6),18));
    zext_ln44_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_res_9_V_reg_1151),18));
    zext_ln785_1_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_27_fu_578_p3),18));
    zext_ln785_2_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_35_fu_640_p3),18));
    zext_ln785_3_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_36_fu_680_p3),18));
    zext_ln785_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_26_fu_538_p3),18));
end behav;
